#!/bin/sh
#
# @license http://www.gnu.org/licenses/gpl.html GPL Version 3
# @author David Hönel <davidh1990@gmx.de>
# @copyright Copyright (c) 2015 David Hönel
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

# Include Configuration File
CONFIG_FILE="/var/opt/PostProcessing/config"
if [ -f ${CONFIG_FILE} ]; then
. ${CONFIG_FILE}
else
	echo "Aborted, no configuration file found!"
	exit 1
fi

postProcessTV () {
	if [ "$(ls -A ${1})" ]; then
		filebot -rename "${1}" ${filebotTVDB} --format "${2}/${filebotTVFolder}/${3}/${filebotTVFile}" ${filebotTVLanguage} ${filebotTVRecursive} ${filebotTVNonstrict} ${filebotTVOverride}
	fi

	if [ ${enableFilebotCleaner} = true ]; then
		filebot -script fn:cleaner "${1}"
	fi

	if [ ${enableRemoteSyncInPostProcessingTV} = true ]; then
		postprocessing SyncTV
	fi

	if [ enableFixPermissionsInDestinationPath = true ]; then
		fixPerms "${destinationPathTV}"
	fi
}

postProcessMovies () {
	cd ${1}

	if [ ${useStereoFilter} = true ];  then
		cat /dev/null > ${stereoFilterMatchedFiles}

		if [ "$(ls -A ${1})" ]; then
			for f in *
			do
				ls "${f}" | grep mkv | mediainfo -f "${f}" | grep "2 channels" && echo "${f}" >> "${stereoFilterMatchedFiles}"
			done
		fi

		if [ -s ${stereoFilterMatchedFiles} ]; then
			while read p; do
				mv "${p}" "${stereoFilterTempPath}"
			done < "${stereoFilterMatchedFiles}"
		fi

		if [ "$(ls -A ${stereoFilterTempPath})" ]; then
			filebot -rename "${stereoFilterTempPath}" ${filebotMoviesDB} --format "${3}/${filebotMoviesFolder}/${filebotMoviesFile}" ${filebotMoviesLanguage} ${filebotMoviesRecursive} ${filebotMoviesNonstrict} ${filebotMoviesOverride}

			if [ ${enableFilebotCleaner} = true ]; then
				filebot -script fn:cleaner "${stereoFilterTempPath}"
			fi

			if [ enableFixPermissionsInDestinationPath = true ]; then
				fixPerms "${3}"
			fi
		fi
	fi

	if [ "$(ls -A ${1})" ]; then
		filebot -rename "${1}" ${filebotMoviesDB} --format "${2}/${filebotMoviesFolder}/${filebotMoviesFile}" ${filebotMoviesLanguage} ${filebotMoviesRecursive} ${filebotMoviesNonstrict} ${filebotMoviesOverride}
	
		if [ ${enableFilebotCleaner} = true ]; then
			filebot -script fn:cleaner "${1}"
		fi
	fi

	if [ enableFixPermissionsInDestinationPath = true ]; then
		fixPerms "${destinationPathMovies}"
	fi

	if [ ${enableRemoteSyncInPostProcessingMovies} = true ]; then
		postprocessing SyncMovies
	fi
}

checkLocalMountPath () {
	if [ ! -d ${1} ]; then
		echo "Local Mount Path ${1} does not exist. Trying to create..."
		mkdir -p ${1}
			if [ $? -eq 0 ]; then
				echo "Local Mount Path ${1} created successfully."
			else
				echo "Could not create Local Mount Path ${1}. Aborting..."
				exit 1
			fi
	fi
}

mountRemoteSyncPath () {
	echo "Checking if ${1} is already mounted."
	if [ `stat -fc%t:%T "${2}"` != `stat -fc%t:%T "${2}/.."` ] && [ -e ${2}/${3}.check ]; then
		echo "${1} is already mounted."
	else
		echo "${1} is not mounted."
		echo "Mounting Directory now...."
		mount "${1}" "${2}" 
		if [ $? -eq 0 ] && [ -e ${2}/${3}.check ]; then
			echo "${1} mounted successfully."
		else
			echo "${1} could not be mounted! Aborting..."
			echo "Maybe ${3}.check in ${2} is missing?"
			exit 1
		fi
	fi
}

umountRemoteSyncPath () {
	umount ${1}
	if [ $? -eq 0 ]; then
			echo "${1} unmounted successfully."
		else
			echo "${1} could not be unmounted!"
	fi	
}

collectFiles () {
	if [ $1 = TV ]; then 
		cd ${destinationPathTV}
		if [ $? -eq 1 ]; then
			echo "Error, could not change directory to ${destinationPathTV}"
			exit 1
		elif [ ${useExcludeListTV} = true ]; then
			find . -type f -mtime $remoteSyncAgeTV | sed -f ${excludeListTV} > ${filesForRemoteSync}
		else
			find . -type f -mtime $remoteSyncAgeTV > ${filesForRemoteSync}
		fi
	elif [ $1 = Movies ]; then
		cd ${destinationPathMovies}
		if [ $? -eq 1 ]; then
			echo "Error, could not change directory to ${destinationPathMovies}"
			exit 1
		elif [ ${useExcludeListMovies} = true ]; then
			find . -type f $remoteSyncAgeMovies | sed -f ${excludeListMovies} > ${filesForRemoteSync}
		else
			find . -type f $remoteSyncAgeMovies > ${filesForRemoteSync}
		fi
	else
		echo "Called with unknown argument. Aborting..."
		exit 1
	fi
}

collectFilesSeason () {
	if -n [ -n ${1} || -n ${2} ]; then
		echo "Missing argument!"
		exit 1
	fi

	cd ${destinationPathTV}
	
	if [ $? -eq 1 ]; then
		echo "Error, could not change directory to ${destinationPathTV}"
		exit 1
	fi

	if [ -n ${3} ]; then
		echo "Writing Season with correct path to ${filesForRemoteSync}"
		find . -type f -name "${1}*${2}*" -mtime "${3}" | tee ${filesForRemoteSync}
	else
		echo "Writing Season with correct path to ${filesForRemoteSync}"
		find . -type f -name "${1}*${2}*" | tee ${filesForRemoteSync}
	fi
}

syncFiles () {
	if [ ! -z ${2} ] && [ ${2} = dryrun ]; then
		echo "Syncing files now...(dryrun)"
		rsync -Ranvh --files-from=${filesForRemoteSync} . ${1}
	else
		echo "Syncing files now..."
		rsync -Ravh --files-from=${filesForRemoteSync} . ${1}
		if [ $? -eq 0 ]; then
			echo "Files synced successfully."
		else
			echo "Filetransfer ended with errors!"
		fi
	fi
}

syncFilesSeason () {
	if [ ! -z ${3} ] && [ ${3} = dryrun ] || [ ! -z ${4} ] &&  [ ${4} = dryrun ]; then
		echo "Syncing season now... Dryrun!"
		rsync -Ravhn --files-from=${filesForRemoteSync} . ${destinationPathTV}
	else
		echo "Syncing Season now..."
		rsync -Ravh --files-from=${filesForRemoteSync} . ${destinationPathTV}
		if [ $? -eq 0 ]; then
			echo "Files synced successfully."
		else
			echo "Filetransfer ended with errors!"
		fi
	fi
}

updateXBMCLib () {
	if [ ${useKodiLibraryUpdate} = true ]; then
		xbmc-send --action="UpdateLibrary(video)" --host=${kodiHost}
		echo "Updating Kodi Library..."
	elif [ ${useKodiLibraryUpdate} = clean ]; then
		echo "Cleaning Kodi Library..."
		xbmc-send --action="CleanLibrary(video)" --host=${kodiHost}
		echo "Waiting ${kodiCleanWaitTime} seconds before Updating Kodi Library."
		sleep ${kodiCleanWaitTime}
		xbmc-send --action="UpdateLibrary(video)" --host=${kodiHost}
		echo "Updating Kodi Library..."
	else
		:
	fi
}

fixPerms () {
	setfacl -Rb "${1}"
	chown root:users "${1}" -R
	find "${1}" -type d -exec chmod 775 {} +
	find "${1}" -type f -exec chmod 664 {} +
}

usage () {
	echo "Usage: $0 [OPTION]... [ARGUMENTS]...\nTry \`$0 -h' or \`$0 --help' for more information."
}

helpMessage () { # Not yet finished
	:
}

case $1 in
	SyncTV)
		if [ ! -z ${2} ] && [ $2 = dryrun ]; then
			collectFiles TV dryrun
		else
			checkLocalMountPath ${localSyncPathTV}
			mountRemoteSyncPath ${remoteSyncPathTV} ${localSyncPathTV} TV
			collectFiles TV
			syncFiles ${localSyncPathTV}
			updateXBMCLib
			umountRemoteSyncPath ${localSyncPathTV}
		fi
	;;
	
	SyncMovies)
		if [ ! -z ${2} ] &&  [ $2 = dryrun ]; then
			collectFiles Movies dryrun
		else
			checkLocalMountPath ${localSyncPathMovies}
			mountRemoteSyncPath ${remoteSyncPathMovies} ${localSyncPathMovies} Movies
			collectFiles Movies
			syncFiles ${localSyncPathMovies}
			updateXBMCLib
			umountRemoteSyncPath ${localSyncPathMovies}
		fi
	;;

	SyncSeason)
		checkLocalMountPath ${localSyncPathTV}
		mountRemoteSyncPath ${remoteSyncPathTV}
		collectFilesSeason ${2} ${3} ${4} ${5}
		updateXBMCLib
		umountRemoteSyncPath ${localSyncPathTV}
	;;	

	postProcessTVNative)
		postProcessTV "${downloadPathTVNative}" "${destinationPathTVNative}" "${filebotTVSeasonNative}"
		updateXBMCLib
	;;

	postProcessTVSecond)
		postProcessTV "${downloadPathTVSecond}" "${destinationPathTVSecond}" "${filebotTVSeasonSecond}"
		updateXBMCLib
	;;	

	postProcessMoviesNative)
		postProcessMovies "${downloadPathMoviesNative}" "${destinationPathMoviesNative}" "${stereoFilterDestinationPathNative}"
		updateXBMCLib
	;;

	postProcessMoviesSecond)
		postProcessMovies "${downloadPathMoviesSecond}" "${destinationPathMoviesSecond}" "${stereoFilterDestinationPathSecond}"
		updateXBMCLib
	;;

	-h|--help)
		helpMessage
	;;

	*)
		usage
	;;
esac

exit 0